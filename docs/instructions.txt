Integration Guide: ROKU

1. Include the Mux Data SDK
Place the sdk file in your libs folder.

2. Setup a new MuxTask.xml.

Create a new task xml inside your 'components folder and give it the following interface.'
```
<component name="MuxTask" extends="Task">
  <interface>
    <field id="video" type="node" alwaysNotify="true"/>
    <field id="config" type="assocarray" alwaysNotify="true"/>
    <field id="rafEvent" type="assocarray" alwaysNotify="true"/>
    <field id="error" type="assocarray" alwaysNotify="true"/>
    <field id="view" type="String" alwaysNotify="true"/>
    <field id="exit" type="Boolean" alwaysNotify="true"/>
  </interface>
  <script type="text/brightscript" uri="pkg:/libs/mux-analytics.brs"/>
</component>
```
3. Setup the task to respond to video events

  ```
  m.mux = m.top.CreateNode("mux")
  m.mux.setField("video", m.video)
  
  muxConfig = {
    property_key: "794c4b2668e515963d9de4623",
  }
  
  m.mux.setField("config", muxConfig)
  m.mux.control = "RUN"
  ```

4. If advertising is to be used. Then send advert tracking events to the SDK.

```
function setUpRokuAdFramework
  adIface.SetTrackingCallback(adTrackingCallback, adIface)

function adTrackingCallback(obj = Invalid as Dynamic, eventType = Invalid as Dynamic, ctx = Invalid as Dynamic)
  mux = GetGlobalAA().global.findNode("mux")
  mux.setField("rafEvent", {obj:obj, eventType:eventType, ctx:ctx})
end function
```

5. If required, manually set the 'view'.

When using advertising, (or any implementation which requires video control to be stopped and started) then the mux SDK will require views to be started and ended manually. A view is one complete piece of content including advertising.

To start a view,
`mux.setField("view", "start")`

To end a view,
`.setField("view", "end")`


